B <- matrix(c(1,2,3,4),2,2)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if (!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
B1 <- makeCacheMatrix(B)
B1
cacheSolve(B1)
B1$getinverse()
set.seed(1)
rpois(5, 2)
?rnorm
?rpois
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
system.time()
system.time(5+5)
system.time(5+5*50*50*50*50*50^30)
system.time(5+5*50*50*50*50*50^300000000000000000000000)
system.time(5+5*50*50*50*50*50^30000000000000000000000000000000000000000000)
system.time(5+5*50*50*50*50*50^30000000000000000000000000000000000000000000^50^50^50)
system.time(5+5*50*50*50*50*50^30000000000000000000000000000000000000000000^50^50^50^50^50^50^50^50^50^50^50^50)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
hospital_data <- read_csv("~/GitHub/rprog_data_ProgAssignment3-data/hospital-data.csv")
View(hospital_data)
library(readr)
outcome_of_care_measures <- read_csv("~/GitHub/rprog_data_ProgAssignment3-data/outcome-of-care-measures.csv")
View(outcome_of_care_measures)
outcome[, 11] <- as.numeric(outcome[, 11])
outcome <- outcome_of_care_measures
rm(outcome_of_care_measures)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
outcome[, 11] <- as.numeric(outcome[, 11], ... = )
outcome[, 11] <- as.numeric(outcome[, 11], ...)
outcome[, 11] <- as.numeric(outcome[, 11])
View(outcome)
outcome[, 11]=="Not Available"
outcome[,outcome[, 11]=="Not Available"] <- NA
outcome[outcome[, 11]=="Not Available",11] <- NA
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 11] <- as.numeric(outcome[11])
outcome[11] <- as.numeric(outcome[11])
outcome$`Hospital 30-Day Death (Mortality) Rates from Heart Attack`
outcome$`Hospital 30-Day Death (Mortality) Rates from Heart Attack` <- as.numeric(outcome$`Hospital 30-Day Death (Mortality) Rates from Heart Attack`)
hist(outcome[,11])
hist(outcome[11])
hist(outcome$`Hospital 30-Day Death (Mortality) Rates from Heart Attack`)
best <- function(state, outcome) {
# Read outcome data
out_dt <- data.table::fread('outcome-of-care-measures.csv')
outcome <- tolower(outcome)
# Column name is same as variable so changing it
chosen_state <- state
# Check that state and outcome are valid
if (!chosen_state %in% unique(out_dt[["State"]])) {
stop('invalid state')
}
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
stop('invalid outcome')
}
# Renaming Columns to be less verbose and lowercase
setnames(out_dt
, tolower(sapply(colnames(out_dt), gsub, pattern = "^Hospital 30-Day Death \\(Mortality\\) Rates from ", replacement = "" ))
)
#Filter by state
out_dt <- out_dt[state == chosen_state]
# Columns indices to keep
col_indices <- grep(paste0("hospital name|state|^",outcome), colnames(out_dt))
# Filtering out unnessecary data
out_dt <- out_dt[, .SD ,.SDcols = col_indices]
# Find out what class each column is
# sapply(out_dt,class)
out_dt[, outcome] <- out_dt[,  as.numeric(get(outcome))]
# Removing Missing Values for numerical datatype (outcome column)
out_dt <- out_dt[complete.cases(out_dt),]
# Order Column to Top
out_dt <- out_dt[order(get(outcome), `hospital name`)]
return(out_dt[, "hospital name"][1])
}
rankhospital <- function(state, outcome, num = "best") {
# Read outcome data
out_dt <- data.table::fread('outcome-of-care-measures.csv')
outcome <- tolower(outcome)
# Column name is same as variable so changing it
chosen_state <- state
# Check that state and outcome are valid
if (!chosen_state %in% unique(out_dt[["State"]])) {
stop('invalid state')
}
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
stop('invalid outcome')
}
# Renaming Columns to be less verbose and lowercase
setnames(out_dt
, tolower(sapply(colnames(out_dt), gsub, pattern = "^Hospital 30-Day Death \\(Mortality\\) Rates from ", replacement = "" ))
)
#Filter by state
out_dt <- out_dt[state == chosen_state]
# Columns indices to keep
col_indices <- grep(paste0("hospital name|state|^",outcome), colnames(out_dt))
# Filtering out unnessecary data
out_dt <- out_dt[, .SD ,.SDcols = col_indices]
# Find out what class each column is
# sapply(out_dt,class)
out_dt[, outcome] <- out_dt[,  as.numeric(get(outcome))]
# Removing Missing Values for numerical datatype (outcome column)
out_dt <- out_dt[complete.cases(out_dt),]
# Order Column to Top
out_dt <- out_dt[order(get(outcome), `hospital name`)]
out_dt <- out_dt[,  .(`hospital name` = `hospital name`, state = state, rate = get(outcome), Rank = .I)]
if (num == "best"){
return(out_dt[1,`hospital name`])
}
if (num == "worst"){
return(out_dt[.N,`hospital name`])
}
return(out_dt[num,`hospital name`])
}
rankall <- function(outcome, num = "best") {
# Read outcome data
out_dt <- data.table::fread('outcome-of-care-measures.csv')
outcome <- tolower(outcome)
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
stop('invalid outcome')
}
# Renaming Columns to be less verbose and lowercase
setnames(out_dt
, tolower(sapply(colnames(out_dt), gsub, pattern = "^Hospital 30-Day Death \\(Mortality\\) Rates from ", replacement = "" ))
)
# Columns indices to keep
col_indices <- grep(paste0("hospital name|state|^",outcome), colnames(out_dt))
# Filtering out unnessecary data
out_dt <- out_dt[, .SD ,.SDcols = col_indices]
# Find out what class each column is
# sapply(out_dt,class)
# Change outcome column class
out_dt[, outcome] <- out_dt[,  as.numeric(get(outcome))]
if (num == "best"){
return(out_dt[order(state, get(outcome), `hospital name`)
, .(hospital = head(`hospital name`, 1))
, by = state])
}
if (num == "worst"){
return(out_dt[order(get(outcome), `hospital name`)
, .(hospital = tail(`hospital name`, 1))
, by = state])
}
return(out_dt[order(state, get(outcome), `hospital name`)
, head(.SD,num)
, by = state, .SDcols = c("hospital name") ])
}
best("SC", "heart attack")
install.packages(data.table)
install.packages('data.table')
best("SC", "heart attack")
setwd("~/GitHub/rprog_data_ProgAssignment3-data")
best("SC", "heart attack")
View(best)
function(state, outcome) {
# Read outcome data
out_dt <- data.table::fread('outcome-of-care-measures.csv')
outcome <- tolower(outcome)
# Column name is same as variable so changing it
chosen_state <- state
# Check that state and outcome are valid
if (!chosen_state %in% unique(out_dt[["State"]])) {
stop('invalid state')
}
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
stop('invalid outcome')
}
# Renaming Columns to be less verbose and lowercase
setnames(out_dt
, tolower(sapply(colnames(out_dt), gsub, pattern = "^Hospital 30-Day Death \\(Mortality\\) Rates from ", replacement = "" ))
)
#Filter by state
out_dt <- out_dt[state == chosen_state]
# Columns indices to keep
col_indices <- grep(paste0("hospital name|state|^",outcome), colnames(out_dt))
# Filtering out unnessecary data
out_dt <- out_dt[, .SD ,.SDcols = col_indices]
# Find out what class each column is
# sapply(out_dt,class)
out_dt[, outcome] <- out_dt[,  as.numeric(get(outcome))]
# Removing Missing Values for numerical datatype (outcome column)
out_dt <- out_dt[complete.cases(out_dt),]
# Order Column to Top
out_dt <- out_dt[order(get(outcome), `hospital name`)]
return(out_dt[, "hospital name"][1])
}
best("SC", "heart attack")
install.packages('bit64')
best("SC", "heart attack")
?setnames
library(data.table)
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
library(readr)
getdata_data_ss06hid <- read_csv("C:/Users/chase/Downloads/getdata_data_ss06hid.csv")
View(getdata_data_ss06hid)
count()
sum(getdata_data_ss06hid$VAL==24)
sum(getdata_data_ss06hid$VAL==24, na.rm = T)
tapply(getdata_data_ss06hid$SERIALNO,getdata_data_ss06hid$PUMA,mean)
setwd("C:/Users/chase/Downloads")
fread()
fread(file = "getdata_data_ss06pid.csv", sep = ",")
DT<-fread(file = "getdata_data_ss06pid.csv", sep = ",")
DT[,mean(pwgtp15),by=SEX]
setwd("~/GitHub/datasciencecoursera/GettingandCleaningDataProject")
# Reading trainings tables:
x_train <- read.table("UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt")
# Reading testing tables:
x_test <- read.table("UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("data/UCI HAR Dataset/test/subject_test.txt")
# Reading feature vector:
features <- read.table('UCI HAR Dataset/features.txt')
# Reading activity labels:
activityLabels = read.table('UCI HAR Dataset/activity_labels.txt')
colnames(x_train) <- features[,2]
colnames(y_train) <-"activityId"
colnames(subject_train) <- "subjectId"
colnames(x_test) <- features[,2]
colnames(y_test) <- "activityId"
colnames(subject_test) <- "subjectId"
colnames(activityLabels) <- c('activityId','activityType')
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")
colnames(subject_test) <- "subjectId"
#merge datasets into one
mrg_train <- cbind(y_train, subject_train, x_train)
mrg_test <- cbind(y_test, subject_test, x_test)
setAllInOne <- rbind(mrg_train, mrg_test)
#read in column names
colNames <- colnames(setAllInOne)
#define ID mean and sd
mean_and_std <- (grepl("activityId" , colNames) |
grepl("subjectId" , colNames) |
grepl("mean.." , colNames) |
grepl("std.." , colNames)
)
#subset setAllInOne
setForMeanAndStd <- setAllInOne[ , mean_and_std == TRUE]
setWithActivityNames <- merge(setForMeanAndStd, activityLabels,
by='activityId',
all.x=TRUE)
#make tidy dataset
secTidySet <- aggregate(. ~subjectId + activityId, setWithActivityNames, mean)
secTidySet <- secTidySet[order(secTidySet$subjectId, secTidySet$activityId),]
#write tidy dataset to txt
write.table(secTidySet, "secTidySet.txt", row.name=FALSE)
